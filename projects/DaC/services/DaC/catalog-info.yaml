apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: DaC
  title: Data as Code - V1.0
  description: A service to create other DaC templates.
  annotations:
    backstage.io/techdocs-ref: dir:.
  tags:
    - skeleton
    - data
    
spec:
  owner: user:guest
  type: DaC

  # These parameters are used to generate the input form in the frontend, and are
  # used to gather input data for the execution of the template.
  parameters:
    - title: Service Parameters
      required:
        - Code
        - Title
        - Description
      properties:
      
        Code:
          title: Code
          type: string
          description: Each code represents an XXX-as-Code service, such as DaC, DHIaC, DMaC, DPaC, etc.
          maxLength: 20
          default: XXXaC
          ui:autofocus: true
          
        Title:
          title: Title
          type: string
          description: Title to be shown in Backstage.
          maxLength: 50
          default: XXX as Code - V1.0
          ui:autofocus: true
          
        Description:
          title: Description
          type: string
          description: Fair description of the service, also shown in Backstage.
          maxLength: 300
          default: A service to ... ... ...
          ui:autofocus: true
          ui:widget: textarea
          ui:options:
            rows: 3
            
    - title: Repository Location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com

  # These steps are executed in the scaffolder backend, using data that we gathered
  # via the parameters above.
  steps:
    # Each step executes an action, in this case one templates files into the working directory.
    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      input:
        url: ./content
        values:
          Code: ${{ parameters.Code }}
          Title: ${{ parameters.Title }}
          Description: ${{ parameters.Description }}
          
    - id: fetch-docs
      name: Fetch Docs
      action: fetch:template
      input:
        targetPath: ./docs
        url: ./content/docs
        values:
          Code: ${{ parameters.Code }}
          Title: ${{ parameters.Title }}
          Description: ${{ parameters.Description }}

    - id: fetch-content
      name: Fetch Content
      action: fetch:template
      input:
        targetPath: ./content
        url: ./content/content
        values:
          Code: ${{ parameters.Code }}
          Title: ${{ parameters.Title }}
          Description: ${{ parameters.Description }}
          
    # This step publishes the contents of the working directory to GitHub.
    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: Backstage's created repo for [${{ parameters.Code }}]
        repoUrl: ${{ parameters.repoUrl }}

# Registration can only be done after manually modifying the placeholders from "^{{..." to "${{..."
#    - id: register
#      name: Register
#      action: catalog:register
#      input:
#        repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
#        catalogInfoPath: '/catalog-info.yaml'

  # Outputs are displayed to the user after a successful execution of the template.
  output:
    links:
      - title: Repository
        url: ${{ steps['publish'].output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps['register'].output.entityRef }}
        
