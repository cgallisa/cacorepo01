apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: ${{ values.Code }}
  title: ${{ values.Title }} 
  description: ${{ values.Description }}
  annotations:
    backstage.io/techdocs-ref: dir:.
  tags:
# sample tag
    - recommended
# put other tags here as required
spec:
  owner: user:guest
  type: DaC
  parameters:
    - title: Service Parameters
      required:
        - Code
      properties:
# sample parameter
        Code:
          title: Code
          type: string
          description: Each code represents an XXX-as-Code service, such as DaC, DHIaC, DMaC, DPaC, etc.
          maxLength: 20
          default: XXXaC
          ui:autofocus: true
# Put other parameters here as required
  steps:
    # Each step executes an action, in this case one templates files into the working directory.
    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      input:
        url: ./content
        values:
          Code: ^{{ parameters.Code }}
          
    - id: fetch-docs
      name: Fetch Docs
      action: fetch:template
      input:
        targetPath: ./docs
        url: ./docs
        values:
          Code: ^{{ parameters.Code }}
          
    # This step publishes the contents of the working directory to GitHub.
    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: Backstage's created repo for [^{{ parameters.Code }}]
        repoUrl: ^{{ parameters.repoUrl }}

    # The final step is to register our new component in the catalog.
    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ^{{ steps['publish'].output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'

  # Outputs are displayed to the user after a successful execution of the template.
  output:
    links:
      - title: Repository
        url: ^{{ steps['publish'].output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ^{{ steps['register'].output.entityRef }}
